package webapi.application.service.selenium;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import okhttp3.*;
import org.springframework.stereotype.Service;
import webapi.application.service.selenium.interfaces.IGeminiSentimentAnalyzer;
import webapi.domain.ApiIntegrated;
import webapi.domain.FacebookComment;
import webapi.domain.FacebookPost;
import webapi.infrastructure.common.Constants;
import webapi.infrastructure.exception.AppException;
import webapi.infrastructure.repositories.ApiIntegratedRepository;

import java.util.List;

@Service
public class GeminiSentimentAnalyzerService implements IGeminiSentimentAnalyzer {
    private final ApiIntegratedRepository apiIntegratedRepository;

    public GeminiSentimentAnalyzerService(ApiIntegratedRepository apiIntegratedRepository) {
        this.apiIntegratedRepository = apiIntegratedRepository;
    }

    private static final OkHttpClient client = new OkHttpClient();
    private static final ObjectMapper mapper = new ObjectMapper();

    @Override
    public void analyzeCommentFacebookSentiment(FacebookComment comment) {
        try {
            ApiIntegrated apiIntegrated = apiIntegratedRepository.findFirstByCodeAndIsDeleted(Constants.APIKeyIntegrated.GEMINI, Boolean.FALSE);
            if (apiIntegrated == null) {
                throw new AppException("Gemini API is not active or not configured.");
            }

            String apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + apiIntegrated.getApiKey();

            String prompt = "Ph√¢n t√≠ch b√¨nh lu·∫≠n sau v√† tr·∫£ l·ªùi ch·ªâ m·ªôt t·ª´ l√† nh√£n k·∫øt qu·∫£: T√≠ch c·ª±c, Ti√™u c·ª±c, ho·∫∑c Trung l·∫≠p. "
                    + "Kh√¥ng gi·∫£i th√≠ch th√™m.\n\nB√¨nh lu·∫≠n: \"" + comment.getCommentText() + "\"\nTr·∫£ l·ªùi:";

            ObjectNode part = mapper.createObjectNode();
            part.put("text", prompt);

            ObjectNode content = mapper.createObjectNode();
            content.put("role", "user");
            content.putArray("parts").add(part);

            ObjectNode root = mapper.createObjectNode();
            root.putArray("contents").add(content);

            RequestBody body = RequestBody.create(
                    mapper.writeValueAsString(root),
                    MediaType.get("application/json")
            );

            Request request = new Request.Builder()
                    .url(apiUrl)
                    .post(body)
                    .build();

            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    throw new AppException("Gemini API Error: " + response);
                }

                String responseBody = response.body().string();
                String result = mapper.readTree(responseBody)
                        .at("/candidates/0/content/parts/0/text")
                        .asText()
                        .toLowerCase();

                System.out.println("üìä Sentiment: " + result + " üîç Comment: " + comment.getCommentText());

                comment.setPositive(result.contains("t√≠ch c·ª±c"));
                comment.setNegative(result.contains("ti√™u c·ª±c"));
                comment.setNeutral(result.contains("trung l·∫≠p"));
            }
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è L·ªói khi g·ªçi Gemini API: " + e.getMessage());
        }
    }
    public void analyzeAllCommentsInBatch(FacebookPost post) {
        try {
            List<FacebookComment> comments = post.getComments();
            if (comments.isEmpty()) return;

            // ‚úÖ Chu·∫©n b·ªã prompt input
            ArrayNode inputArray = mapper.createArrayNode();
            int id = 1;
            for (FacebookComment c : comments) {
                ObjectNode item = mapper.createObjectNode();
                item.put("id", id++);
                item.put("text", c.getCommentText());
                inputArray.add(item);
            }

            // ‚úÖ Prompt cho Gemini
            String prompt = "B·∫°n h√£y ph√¢n t√≠ch c·∫£m x√∫c cho c√°c b√¨nh lu·∫≠n sau v√† tr·∫£ l·ªùi theo ƒë√∫ng ƒë·ªãnh d·∫°ng JSON, kh√¥ng th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch n√†o.\n\n"
                    + "Input:\n" + mapper.writeValueAsString(inputArray)
                    + "\n\nY√™u c·∫ßu: Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng JSON:\n"
                    + "[{\"id\": 1, \"sentiment\": \"T√≠ch c·ª±c\"}, {\"id\": 2, \"sentiment\": \"Trung l·∫≠p\"}, ...]";

            // ‚úÖ T·∫°o body request
            ObjectNode part = mapper.createObjectNode();
            part.put("text", prompt);

            ObjectNode content = mapper.createObjectNode();
            content.put("role", "user");
            content.putArray("parts").add(part);

            ObjectNode root = mapper.createObjectNode();
            root.putArray("contents").add(content);

            String apiKey = apiIntegratedRepository
                    .findFirstByCodeAndIsDeleted(Constants.APIKeyIntegrated.GEMINI, false)
                    .getApiKey();

            String apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" + apiKey;

            RequestBody body = RequestBody.create(
                    mapper.writeValueAsString(root),
                    MediaType.get("application/json")
            );

            Request request = new Request.Builder()
                    .url(apiUrl)
                    .post(body)
                    .build();

            // ‚úÖ G·ª≠i request
            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    throw new AppException("Gemini API Error: " + response);
                }

                // ‚úÖ ƒê·ªçc duy nh·∫•t m·ªôt l·∫ßn
                String rawResponse = response.body().string();

                // ‚úÖ Tr√≠ch xu·∫•t text tr·∫£ l·ªùi
                String responseText = mapper.readTree(rawResponse)
                        .at("/candidates/0/content/parts/0/text")
                        .asText()
                        .replaceAll("(?s)```json|```", "") // Lo·∫°i b·ªè markdown n·∫øu c√≥
                        .trim();

                // ‚úÖ Parse k·∫øt qu·∫£ JSON tr·∫£ v·ªÅ t·ª´ Gemini
                ArrayNode output = (ArrayNode) mapper.readTree(responseText);

                for (JsonNode node : output) {
                    int idx = node.get("id").asInt() - 1;
                    if (idx >= 0 && idx < comments.size()) {
                        String sentiment = node.get("sentiment").asText().toLowerCase();

                        FacebookComment cmt = comments.get(idx);
                        cmt.setPositive(sentiment.contains("t√≠ch c·ª±c"));
                        cmt.setNegative(sentiment.contains("ti√™u c·ª±c"));
                        cmt.setNeutral(sentiment.contains("trung l·∫≠p"));
                    }
                }

                System.out.println("‚úÖ ƒê√£ ph√¢n t√≠ch t·∫•t c·∫£ b√¨nh lu·∫≠n b·∫±ng Gemini batch");
            }

        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è L·ªói khi g·ªçi Gemini batch: " + e.getMessage());
        }
    }
}
